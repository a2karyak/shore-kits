m4_pattern_allow([^AC_PACKAGE])

# configure.in for Cordoba         -*- sh -*-
# Process this file with autoconf to produce a configure script. 
AC_INIT(THIS_IS_CORDOBA,2.0)

# find system type (using this macro means we must include
# the files install-sh, config.sub, and config.guess (all from
# the autoconf distribution) in our source tree!)
AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE

AC_SUBST(CORDOBA_FEATURES_DEFINES) 
AC_SUBST(NEWLINE)

AC_PREREQ(2.50)
AC_PROG_CXX
AC_PROG_RANLIB

AC_MSG_NOTICE(Configuring Cordoba)

# Set here the version numbers
CORDOBA_VERSION_MAJOR="stagetrx"
CORDOBA_VERSION_MINOR=2
CORDOBA_VERSION_REV=0
CORDOBA_VERSION=$CORDOBA_VERSION_MAJOR.$CORDOBA_VERSION_MINOR.$CORDOBA_VERSION_REV

# make sure I haven't forgotten to run autoconf
if test configure -ot configure.in; then
  AC_MSG_RESULT(configure is older than configure.in; running autoconf)
  autoconf
  ./configure
  exit
fi 

# check for egrep
AC_PROG_EGREP


# debugging diagnostic; set to 'echo' to debug or 'true' for production
diagnostic() {
  echo "$@"
  #true "$@"
}

# determine if a binary is in the path
binaryExists() {
  # on cygwin, 'which' always returns success, so use 'type' instead
  if type "$1" >/dev/null 2>&1; then
    return 0
  else
    return 1
  fi
}


# ---------- Compiler Checking ----------
CORDOBA_CC=`echo $CC |  sed 's/.*\///'`
AC_MSG_CHECKING(CC)
AC_MSG_RESULT($CORDOBA_CC)

CORDOBA_CXX=`echo $CXX |  sed 's/.*\///'`
AC_MSG_CHECKING(CXX)
AC_MSG_RESULT($CORDOBA_CXX)

CORDOBA_CXX_VERSION="0.0"


if test "$CORDOBA_CC" = "cc"; then
   # ------ (SUN) C/C++ compiler ------
   echo "using CC"

   # cc version
   #AC_MSG_CHECKING(compiler version)
   #cc_ver=`$CXX -V | grep 'C++' | sed 's/^.*C++ //'`
   #cc_major=`echo $gcc_ver | sed 's/\..*$//'`
   #[cc_mid=`echo $gcc_ver | sed 's/[0-9]\.//' | sed 's/\..*$//'`]
   #CORDOBA_CXX_VERSION="$cc_major.$cc_mid"
   #AC_MSG_RESULT($CORDOBA_CXX_VERSION)

   # *** Checking the compiler version (cc>=5.9)
   reqcc_major=5
   reqcc_mid=8
   #if test $cc_major -lt $reqcc_major -o $cc_mid -le $reqcc_mid; then
      #AC_MSG_WARN([CC Compiler $CORDOBA_CC version $CORDOBA_CXX_VERSION is currently not supported by Cordoba])
      #AC_MSG_WARN([Compiled successfully with cc Compiler $reqcc_major.$reqcc_mid or higher])
   #fi   

else
   # ------ GNU C/C++ compiler ------
   echo "using GCC"

   # gcc
   if binaryExists g++33; then
      GCC_COMPILER=g++
   else
      if binaryExists g++; then
         GCC_COMPILER=g++
      else
         AC_MSG_ERROR([
            No suitable compiler found. 
	    Please make sure gcc is in your path.
         ])
      fi
   fi

   # gcc version
   AC_MSG_CHECKING(compiler version)

   gcc_ver=`$GCC_COMPILER --version | grep 'g++' | sed 's/^.*(GCC) //'`
   gcc_major=`echo $gcc_ver | sed 's/\..*$//'`
   [gcc_mid=`echo $gcc_ver | sed 's/[0-9]\.//' | sed 's/\..*$//'`]
   [gcc_minor=`echo $gcc_ver | sed 's/^[0-9]\.[0-9]\.//' | sed 's/ .*$//'`]

   CORDOBA_CXX_VERSION="$gcc_major.$gcc_mid.$gcc_minor"
   AC_MSG_RESULT($CORDOBA_CXX_VERSION)

   # *** Checking the compiler version (g++>=4)
   reqgcc_major=4
   reqgcc_mid=0
   if test $gcc_major -lt $reqgcc_major -o $gcc_mid -lt $reqgcc_mid; then
      AC_MSG_WARN([GCC Compiler $GCC_COMPILER version $CORDOBA_CXX_VERSION is currently not supported by Cordoba])
      AC_MSG_WARN([Compiled successfully with GCC Compiler $reqgcc_major.$reqgcc_mid or higher])
   fi   
fi 
# ---------- End of Compiler Checking ----------



# ----------- cordoba required libraries -------------
# $target is typically processor-vendor-os
case "$target" in
  # Sparc Solaris
  *sparc*sun*)
    BOOST_HOME_DEFAULT="$HOME/apps/boost"
    SHORE_HOME_DEFAULT="$HOME/apps/shore"
    ;;

  *ppc*)
    BOOST_HOME_DEFAULT="/usr/software/boost"
    SHORE_HOME_DEFAULT="/usr/software/shore"
    ;;

  *ia64*)
    BOOST_HOME_DEFAULT="$HOME/work/apps/boost"
    SHORE_HOME_DEFAULT="$HOME/work/apps/shore"
    ;;

 *)
    BOOST_HOME_DEFAULT="/usr/software/boost"
    SHORE_HOME_DEFAULT="/usr/software/shore"
    ;;
esac

# getting user parameters
AC_ARG_VAR(BOOST_HOME, Location of Boost Installation; default is $BOOST_HOME_DEFAULT)
AC_ARG_VAR(SHORE_HOME, Location of Shore Installation; default is $SHORE_HOME_DEFAULT)


# this specifies the root of the source tree; it's just the
# directory where ./configure runs, except on cygwin, which
# overrides this below
AC_MSG_CHECKING(Home directory)
CORDOBA_HOME=`pwd`
AC_MSG_RESULT($CORDOBA_HOME)


# BOOST
AC_MSG_CHECKING(Boost directory)
# if not a specific parameter try the default one
if test -z $BOOST_HOME; then
    BOOST_HOME=$BOOST_HOME_DEFAULT
fi

# check if valid boost dir
if ! test -d $BOOST_HOME -a -f $BOOST_HOME/boost/array.hpp; then
    AC_ERROR([
            Not valid boost directory at $BOOST_HOME;
            Please run ./configure BOOST_HOME=where boost is located])
fi

AC_MSG_RESULT($BOOST_HOME)


# SHORE
AC_MSG_CHECKING(Shore directory)
if test -z $SHORE_HOME; then
    SHORE_HOME=$SHORE_HOME_DEFAULT
fi

# check if valid shore dir
if ! test -d $SHORE_HOME -a -f $SHORE_HOME/src/common/sm_vas.h; then
    AC_ERROR([
            Not valid Shore directory at $SHORE_HOME;
            Please run ./configure SHORE_HOME=where shore is located])
fi

AC_MSG_RESULT($SHORE_HOME)



# ----------- platform-specific code -------------
# $target is typically processor-vendor-os
case "$target" in
  # linux on x86
  *86*linux*)
    AC_MSG_RESULT(configuring for linux/x86)

    ARCHOS=x86_LINUX
    CPU_FLAGS="-march=pentium4"
    ;;

  # linux on itanium? (not implem)
  *ia64*linux*)
    AC_MSG_RESULT(configuring for linux/ia64)

    ARCHOS=IA64_LINUX
    CPU_FLAGS="-mtune=itanium2"
    ;;

  # linux on power5
  *ppc*linux*)
    AC_MSG_RESULT(configuring for linux/power5)

    ARCHOS=PPC_LINUX
    CPU_FLAGS="-mcpu=power5"
    ;;


  # linux on power5-ppc64
  *powerpc64*linux*)
    AC_MSG_RESULT(configuring for linux/powerpc64)

    ARCHOS=PPC64_LINUX
    CPU_FLAGS="-mcpu=powerpc64"
    ;;
    
  # Sparc Solaris
  *sparc*sun*)
    AC_MSG_RESULT(configuring for sparc/sun)
    
    ARCHOS=SPARC_SUN
    ;;

  # x86 Cygwin
  *686*cygwin*)
    AC_MSG_RESULT(configuring for i686/cygwin)
    
    ARCHOS=x86_LINUX
    ;;

 *)
    AC_MSG_ERROR([
      Unsupported platform $target -- sorry.
      Linux/x86, Linux/IA64, Linux/PPC
      currently are supported platforms.
    ])
    ;;
esac

# Create output directory
if ! test -d "obj/$ARCHOS"; then 
   mkdir --parents "obj/$ARCHOS"
   AC_MSG_NOTICE([Creating output directory obj/$ARCHOS])
fi


NEWLINE="\\
"

# CORDOBA FEATURES
# Give a list of features with the defaults

# *** old qpipe features
#features="tpcc=yes tpch=yes"                    # workloads
#features="$features tpccgen=yes tpchgen=yes"    # workload generators
#features="$features socket=yes"

# cordoba features
features="$features shore=yes"  # configure for shore 

CORDOBA_FEATURES=""
CORDOBA_NOFEATURES=""

# iterate over all features
for f_val in $features
do
   f=`echo $f_val | sed -e s%=.*$%%`
   AC_MSG_CHECKING(whether to use Cordoba feature $f)
   # default value from "features"
   defval=`echo $f_val | sed -e s%^.*=%%`
   # current value
   getcurval="echo \${with_$f:=$defval}"
   curval=`eval $getcurval`
   AC_MSG_RESULT($curval)
   if test $curval = yes ;then
      CORDOBA_FEATURES="$CORDOBA_FEATURES $f"
   else
      CORDOBA_NOFEATURES="$CORDOBA_NOFEATURES $f"
   fi
done


echo $CORDOBA_FEATURES


## Now produce the CORDOBA_FEATURES_DEFINES
CORDOBA_FEATURES_DEFINES=""
# Convert to upper  case
[ac_toupper="'[a-z]' '[A-Z]'"]
for f in `echo $CORDOBA_FEATURES | tr $ac_toupper`
do
   CORDOBA_FEATURES_DEFINES="${CORDOBA_FEATURES_DEFINES}@NEWLINE@export USE_$f=yes"
done
for f in `echo $CORDOBA_NOFEATURES | tr $ac_toupper`
do
   CORDOBA_FEATURES_DEFINES="${CORDOBA_FEATURES_DEFINES}@NEWLINE@export USE_$f="
done


# ----------------- finish up -------------------
# names of the variables that get substituted in files; for example,
# write @ARCHOS@ somewhere in a written file to get it substituted
AC_SUBST(ARCHOS)
AC_SUBST(GCC_COMPILER)
AC_SUBST(CORDOBA_HOME)
AC_SUBST(CORDOBA_VERSION_MAJOR)
AC_SUBST(CORDOBA_VERSION_MINOR)
AC_SUBST(CORDOBA_VERSION_REV)
AC_SUBST(CORDOBA_VERSION)

# basic flags/libs every arch needs

# *** PROFILE_FLAGS CAUSES DEADLOCK ON crete.db.cs.cmu.edu ***
#DEBUG_FLAGS="-O0"
#PROFILE_FLAGS="-pg -O0"
OPT_FLAGS="-O3 -finline-limit=1200 -fomit-frame-pointer"
#OPT_DEBUG_FLAGS="-O3 -fno-inline"
CXXFLAGS="-g $DEBUG_FLAGS $PROFILE_FLAGS $OPT_FLAGS $CPU_FLAGS \
        -Wall -Wcast-align -Wextra -Wfloat-equal \
	-Wno-invalid-offsetof -Wconversion -Wno-system-headers -D_REENTRANT"

LDFLAGS="-lnsl -ldl -lm -lpthread "

if test "$ARCHOS" = "SPARC_SUN"; then
    LDFLAGS="$LDFLAGS -lsocket -lrt -L/usr/local/lib/sparcv9 -lcurses -lmtmalloc"

# optimize *a lot* flags
#    CXXFLAGS="-xtarget=ultraT1 -m64 -features=extensions,zla -xthreadvar=no%dynamic -xdebugformat=stabs -xs -g0 -xO4 -mt -lpthread -library=stlport4"
#    CXXFLAGS="-errtags=yes -xtarget=native -m64 -features=extensions,zla -xthreadvar=no%dynamic -xdebugformat=stabs -xs -g0 -xO4 -mt -lpthread -library=stlport4"
#     CXXFLAGS="-xarch=sparcvis2 -m64 -features=extensions,zla -xthreadvar=no%dynamic -xdebugformat=stabs -xs -g0 -xO4 -mt -lpthread -library=stlport4"

# debugging flags
    CXXFLAGS="-xarch=sparcvis2 -m64 -features=extensions,zla -xs -g -xdebugformat=stabs -xinstrument=datarace -mt -lpthread -library=stlport4"
fi

# Adding curses lib
if test "$ARCHOS" = "SPARC_SUN"; then
   LDFLAGS="$LDFLAGS -lcurses"
else
   LDFLAGS="$LDFLAGS -lncurses"
fi

AC_SUBST(CXXFLAGS)
AC_SUBST(LDFLAGS)
    
AC_PROG_LIBTOOL
        
# MY_AC_CONFIG_FILES(filename)
# do AC_CONFIG_FILES(filename, chmod a-w filename)
define([MY_AC_CONFIG_FILES],
[{
  if test -f [$1].in; then
    AC_CONFIG_FILES([$1], chmod a-w [$1])
  else
    true
    #echo "skipping [$1] because it's not in this distribution"
  fi
}])
define([MY_AC_CONFIG_EXE_FILES],
[{
  if test -f [$1].in; then
    AC_CONFIG_FILES([$1], [chmod a-w,a+x $1])
  else
    true
    #echo "skipping [$1] because it's not in this distribution"
  fi
}])
#MY_AC_CONFIG_FILES([Makefile src/Makefile])
AC_CONFIG_FILES([ Makefile ])

AC_OUTPUT()

AM_CONDITIONAL(SPARC_MACHINE, test "$ARCHOS" = "SPARC_SUN")

# show the user what the variables have been set to
cat <<EOF

Cordoba configuration:
  Cordoba version:          CORDOBA_VERSION      $CORDOBA_VERSION
  Cordoba home:             CORDOBA_HOME         $CORDOBA_HOME	
  Cordoba features:         CORDOBA_FEATURES    $CORDOBA_FEATURES
  CC Compiler:              CC                   $CC    
  CXX Compiler:             CXX                  $CXX
  CC version                CXX_VERSION          $CORDOBA_CXX_VERSION
  Boost home:               BOOST_HOME           $BOOST_HOME
  Shore home:               SHORE_HOME           $SHORE_HOME
  Architecture/OS:          ARCHOS               $ARCHOS
EOF
