/*
     Shore-kits -- Benchmark implementations for Shore-MT
   
                       Copyright (c) 2007-2009
      Data Intensive Applications and Systems Labaratory (DIAS)
               Ecole Polytechnique Federale de Lausanne
   
                         All Rights Reserved.
   
   Permission to use, copy, modify and distribute this software and
   its documentation is hereby granted, provided that both the
   copyright notice and this permission notice appear in all copies of
   the software, derivative works or modified versions, and any
   portions thereof, and that both notices appear in supporting
   documentation.
   
   This code is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. THE AUTHORS
   DISCLAIM ANY LIABILITY OF ANY KIND FOR ANY DAMAGES WHATSOEVER
   RESULTING FROM THE USE OF THIS SOFTWARE.
*/


#
# @file:  shore.conf
#
# @brief: Shore-kits configuration file
#                                                                          #
# There are three supported benchmarks: TPC-C, TPC-B, and TM-1 (aka
# Nokia Network Database Benchmark). A scaling factor of one (1)
# translates to, respectively, 1 wh (130MB), 1 branch (20 MB), and
# 10000 subscribers (15MB).
#



############################################################################
#                                                                          #
# Predefined configurations                                                #
#                                                                          #
# Each configuration has two parts: the name (defined just below),         #
# followed by a section of name-* parameters which are specific to         #
# that configuration. These include benchmark selection, locations of      #
# files, etc.                                                              #
#                                                                          #
# Notes:                                                                   #
# - Make sure to have only 1 "db-config" parameter enabled.                #
#                                                                          #
############################################################################


##### TPC-C #####

#db-config = 1wh
db-config = 10wh
#db-config = 100wh
#db-config = 1000wh


##### TPC-B #####

#db-config = tpcb100-dlog10


##### TM-1  #####

#db-config = 10sf-tm1
#db-config = 100sf-tm1



############################################################################
#                                                                          #
# Clobber device                                                           #
#                                                                          #
# Clobber the existing device file (if any) and populate a new             #
# database (1=yes,0=no).                                                   #
#                                                                          #
# Notes:                                                                   #
# - Log recovery happens before Shore checks this option, so delete        #
#   the log for a completely fresh start.                                  #
# - For disk-based data and a large buffer pool, it is *significantly*     #
#   faster to load a new database than warm up an existing one.            #
#                                                                          #
############################################################################

#db-clobberdev = 1    ### It will populate a new database
db-clobberdev = 0     ### It will open an existing database



############################################################################
#                                                                          #
# Fake I/O delay                                                           #
#                                                                          #
# Impose an artificial delay whenever there is an I/O operation. This      #
# mechanism allows to decouple the I/O subsystem performance from the      #
# measurements by storing the database on an in-memory file system. The    #
# artificial delay simulates a high-end I/O subsystem, such that all I/O   #
# requests can proceed in parallel but must each still pay the cost of an  #
# I/O. This arrangement is somewhat pessimistic because it assumes every   #
# access requires the same latency. But, it ensures that all aspects of    #
# the storage manager are exercised.                                       #
#                                                                          #
# shore-fakeiodelay-enable: Enable/Disable the fake I/O delay mechanism    #
# shore-fakeiodelay       : The imposed delay, in usec                     #
#                                                                          #
############################################################################

##### Enable/Disable fake I/O delay (0/1);
#shore-fakeiodelay-enable = 0
shore-fakeiodelay-enable = 1

##### The imposed delay (in usec) #####
#shore-fakeiodelay = 5
shore-fakeiodelay = 0



############################################################################
#                                                                          #
# Logging                                                                  #
#                                                                          #
############################################################################

##### Enable/Disable logging (yes/no) #####
#shore-logging = no
shore-logging = yes

##### Misc #####
shore-errlog = info # one of {none emerg fatal alert internal error warning info debug}
shore-diskrw = /export/home/ipandis/DEV/shore-lomond/installed/bin/diskrw


############################################################################
#                                                                          #
# Number of page cleaners                                                  #
#                                                                          #
# Number of asynchronous page cleaners to use.                             #
# Generally one per physical disk is good.                                 #
#                                                                          #
############################################################################

shore-pagecleaners = 16



############################################################################
#                                                                          #
# Loading parameters                                                       #
#                                                                          #
# db-loaders:                                                              #
# Number of loader threads. More gives higher parallelism but deadlocks    #
# are more likely as well. 10-20 usually gives the shortest overall load   #
# time.                                                                    # 
#                                                                          #
# db-record-preloads:                                                      #
# Number of (single-threaded) preloads per worker to do before firing up   #
# the threads. Buffers loader threads so they deadlock less, but at the    #
# cost of increased serial execution (reduced parallelism).                #
#                                                                          #
############################################################################

##### Number of loader threads #####
db-loaders = 20

##### Number of preloads per worker #####
db-record-preloads = 2000



############################################################################
#                                                                          #
# Worker parameters                                                        #
#                                                                          #
############################################################################

##### Number of worker threads #####
#db-workers = 100
db-workers = 64

##### srmw-queue spin #####
db-worker-queueloops = 1
#db-worker-queueloops = 2000
#db-worker-queueloops = 10000

###### worker queue batch sz #####
# look also client batch sz
db-worker-inp-queue-sz = 15
db-worker-com-queue-sz = 0




############################################################################
#                                                                          #
# Client parameters                                                        #
#                                                                          #
############################################################################

##### Think time  #####
# note: it should be combined with batchsz=1
db-cl-thinktime = 0

##### Client batch sz #####
#db-cl-batchsz = 1
db-cl-batchsz = 30




############################################################################
#                                                                          #
# Platform-specific parameters                                             #
#                                                                          #
############################################################################

##### CPU Counts  #####

# hard-limit (machine dependent)
sys-maxcpucount = 64
# soft-limit
sys-activecpucount = 64



############################################################################
#                                                                          #
# Default values for the (measure) and (test) commands                     #
#                                                                          #
############################################################################

# MEASURE
measure-num-queried = 32    # no of whs queried
measure-spread      = 1     # 0=No,1=Yes
measure-num-threads = 32
measure-duration    = 30    # duration of each iteration (in secs.)
measure-trx-id      = 102   # 2=Base-Pay
measure-iterations  = 2
measure-sli         = 0
measure-cl-binding  = 0     # client binding policy - 0=NoBinding,1=Adjacent,2=SpreadToCores

# TEST
# WARNING: the test command is innacurate. Use MEASURE instead
test-num-queried = 32       # no of whs queried
test-spread      = 1        # 0=No,1=Yes
test-num-threads = 32
test-num-trxs    = 10       # no of trxs per thread
test-trx-id      = 111      # e.g. 2=Base-Pay
test-iterations  = 2 
test-sli         = 0        # 0=No,1=Yes
test-cl-binding  = 0        # client binding policy - 0=NoBinding,1=Adjacent,2=SpreadToCores





############################################################################
#                                                                          #
#                                                                          #
# Predefined configurations                                                #
#                                                                          #
#                                                                          #
############################################################################


#########################
####                 ####
#### 1WH DB (~100MB) ####
####                 ####
#########################


### Device file
1wh-device = databases/shore1wh

### Device quota (in KB)
### 200MB
1wh-devicequota = 204800

### Buffer pool size (in KB)
### 1GB (db in memory)
1wh-bufpoolsize = 1024000

### Location of log directory
1wh-logdir = log1

### Size of log (in KB)
### 1GB 
1wh-logsize = 1024000

### Size of log buffer (in KB)
### 80MB
1wh-logbufsize = 81920

### tpcc-sf
1wh-sf = 1

### system
1wh-system = baseline

### benchmark
1wh-benchmark = tpcc



########################
####                ####
#### 10WH DB (~1GB) ####
####                ####
########################


### Device file
10wh-device = databases/shore10wh

### Device quota (in KB)
### 12GB
10wh-devicequota = 12097152

### Buffer pool size (in KB)
### 4GB (db in memory)
10wh-bufpoolsize = 4096000

### Location of log directory
10wh-logdir = log10

### Size of log (in KB)
### 2GB 
10wh-logsize = 2048000

### Size of log buffer (in KB)
### 80MB
10wh-logbufsize = 81920

### tpcc-sf
10wh-sf = 10

### system
10wh-system = baseline

### benchmark
10wh-benchmark = tpcc



##########################
####                  ####
#### 100WH DB (~13GB) ####
####                  ####
##########################


### Device file
100wh-device = databases/shore100wh

### Device quota (in KB)
### 20GB
100wh-devicequota = 20971520

### Buffer pool size (in KB)
### 12GB (db in memory)
#100wh-bufpoolsize = 12582912
### 5GB (5/13~40% in mem)
100wh-bufpoolsize = 5242880

### Location of log directory
100wh-logdir = log100

### Size of log (in KB)
### 2GB
100wh-logsize = 2048000

### Size of log buffer (in KB)
### 80MB
100wh-logbufsize = 81920

### tpcc-sf
100wh-sf = 100

### system
100wh-system = baseline

### benchmark
100wh-benchmark = tpcc



############################
####                    ####
#### 1000WH DB (~100GB) ####
####                    ####
############################


### Device file
1000wh-device = databases/shore1000wh

### Device quota (in KB)
### 200GB
1000wh-devicequota = 204800000

### Buffer pool size (in KB)
### 10GB (db in disk)
1000wh-bufpoolsize = 10240000

### Location of log directory
1000wh-logdir = dsklog

### Size of log (in KB)
### 4GB
1000wh-logsize = 4096000

### Size of log buffer (in KB)
### 80MB
1000wh-logbufsize = 81920

### tpcc-sf
1000wh-sf = 1000

### system
1000wh-system = baseline

### benchmark
1000wh-benchmark = tpcc



#########################
####                 ####
####    100 Branch   ####
#### TPC-B DB (~1GB) ####
####                 ####
#########################


### Device file
tpcb100-dlog10-device = databases/tpcb100

### Device quota (in KB)
### 12GB
tpcb100-dlog10-devicequota = 12097152

### Buffer pool size (in KB)
### 4GB (db in memory)
tpcb100-dlog10-bufpoolsize = 4096000

### Location of log directory
tpcb100-dlog10-logdir = tpcblog100

### Size of log (in KB)
### 2GB 
tpcb100-dlog10-logsize = 2048000

### Size of log buffer (in KB)
### 80MB
tpcb100-dlog10-logbufsize = 8192

### Number of log segments
tpcb100-dlog10-logcount = 10

### tpcc-sf
tpcb100-dlog10-sf = 100


### system
tpcb100-dlog10-system = baseline

### benchmark
tpcb100-dlog10-benchmark = tpcb




######################
####              ####
#### 10SF TM-1 DB ####
####              ####
######################

### Device file
10sf-tm1-device = databases/tm1-db-10sf

### Device quota (in KB)
### 200MB
10sf-tm1-devicequota = 204800

### Buffer pool size (in KB)
### 1GB (db in memory)
10sf-tm1-bufpoolsize = 1024000

### Location of log directory
10sf-tm1-logdir = log-tm1-10

### Size of log (in KB)
### 1GB 
10sf-tm1-logsize = 1024000

### Size of log buffer (in KB)
### 80MB
10sf-tm1-logbufsize = 81920

### tm1-sf
10sf-tm1-sf = 10

### system
10sf-tm1-system = baseline

### benchmark
10sf-tm1-benchmark = tm1





#######################
####               ####
#### 100SF TM-1 DB ####
####               ####
#######################

### Device file
100sf-tm1-device = databases/tm1-db-100sf

### Device quota (in KB)
### 2GB
100sf-tm1-devicequota = 2097152

### Buffer pool size (in KB)
### 2GB (db in memory)
100sf-tm1-bufpoolsize = 2097152

### Location of log directory
100sf-tm1-logdir = log-tm1-100

### Size of log (in KB)
### 1GB 
100sf-tm1-logsize = 1024000

### Size of log buffer (in KB)
### 80MB
100sf-tm1-logbufsize = 81920

### tm1-sf
100sf-tm1-sf = 100

### system
100sf-tm1-system = baseline

### benchmark
100sf-tm1-benchmark = tm1
